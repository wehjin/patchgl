// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patchgl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "patchgl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace patchgl {

namespace {

const ::google::protobuf::Descriptor* Close_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Close_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginPatch_Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginPatch_Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginPatch_Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginPatch_Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
struct CommandOneofInstance {
  const ::patchgl::Close* close_;
  const ::patchgl::BeginPatch* begin_patch_;
  const ::patchgl::EndPatch* end_patch_;
}* Command_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_patchgl_2eproto() {
  protobuf_AddDesc_patchgl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "patchgl.proto");
  GOOGLE_CHECK(file != NULL);
  Close_descriptor_ = file->message_type(0);
  static const int Close_offsets_[1] = {
  };
  Close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Close_descriptor_,
      Close::default_instance_,
      Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Close));
  BeginPatch_descriptor_ = file->message_type(1);
  static const int BeginPatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, patch_id_),
  };
  BeginPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginPatch_descriptor_,
      BeginPatch::default_instance_,
      BeginPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginPatch));
  BeginPatch_Position_descriptor_ = BeginPatch_descriptor_->nested_type(0);
  static const int BeginPatch_Position_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, near_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, far_),
  };
  BeginPatch_Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginPatch_Position_descriptor_,
      BeginPatch_Position::default_instance_,
      BeginPatch_Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginPatch_Position));
  BeginPatch_Color_descriptor_ = BeginPatch_descriptor_->nested_type(1);
  static const int BeginPatch_Color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, alpha_),
  };
  BeginPatch_Color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginPatch_Color_descriptor_,
      BeginPatch_Color::default_instance_,
      BeginPatch_Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginPatch_Color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginPatch_Color));
  EndPatch_descriptor_ = file->message_type(2);
  static const int EndPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPatch, patch_id_),
  };
  EndPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndPatch_descriptor_,
      EndPatch::default_instance_,
      EndPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndPatch));
  Command_descriptor_ = file->message_type(3);
  static const int Command_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, close_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, begin_patch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Command_default_oneof_instance_, end_patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, requests_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      Command_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_patchgl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Close_descriptor_, &Close::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginPatch_descriptor_, &BeginPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginPatch_Position_descriptor_, &BeginPatch_Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginPatch_Color_descriptor_, &BeginPatch_Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndPatch_descriptor_, &EndPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_patchgl_2eproto() {
  delete Close::default_instance_;
  delete Close_reflection_;
  delete BeginPatch::default_instance_;
  delete BeginPatch_reflection_;
  delete BeginPatch_Position::default_instance_;
  delete BeginPatch_Position_reflection_;
  delete BeginPatch_Color::default_instance_;
  delete BeginPatch_Color_reflection_;
  delete EndPatch::default_instance_;
  delete EndPatch_reflection_;
  delete Command::default_instance_;
  delete Command_default_oneof_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_patchgl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpatchgl.proto\022\007patchgl\"\007\n\005Close\"\267\002\n\nBe"
    "ginPatch\022.\n\010position\030\001 \002(\0132\034.patchgl.Beg"
    "inPatch.Position\022(\n\005color\030\002 \002(\0132\031.patchg"
    "l.BeginPatch.Color\022\021\n\006parent\030\003 \001(\007:\0010\022\020\n"
    "\010patch_id\030\004 \002(\007\032e\n\010Position\022\014\n\004left\030\001 \002("
    "\002\022\r\n\005right\030\002 \002(\002\022\013\n\003top\030\003 \002(\002\022\016\n\006bottom\030"
    "\004 \002(\002\022\017\n\004near\030\005 \001(\002:\0011\022\016\n\003far\030\006 \001(\002:\0011\032C"
    "\n\005Color\022\013\n\003red\030\001 \002(\002\022\r\n\005green\030\002 \002(\002\022\014\n\004b"
    "lue\030\003 \002(\002\022\020\n\005alpha\030\004 \001(\002:\0011\"\034\n\010EndPatch\022"
    "\020\n\010patch_id\030\001 \002(\007\"\212\001\n\007Command\022\037\n\005close\030\001"
    " \001(\0132\016.patchgl.CloseH\000\022*\n\013begin_patch\030\002 "
    "\001(\0132\023.patchgl.BeginPatchH\000\022&\n\tend_patch\030"
    "\003 \001(\0132\021.patchgl.EndPatchH\000B\n\n\010requests", 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "patchgl.proto", &protobuf_RegisterTypes);
  Close::default_instance_ = new Close();
  BeginPatch::default_instance_ = new BeginPatch();
  BeginPatch_Position::default_instance_ = new BeginPatch_Position();
  BeginPatch_Color::default_instance_ = new BeginPatch_Color();
  EndPatch::default_instance_ = new EndPatch();
  Command::default_instance_ = new Command();
  Command_default_oneof_instance_ = new CommandOneofInstance;
  Close::default_instance_->InitAsDefaultInstance();
  BeginPatch::default_instance_->InitAsDefaultInstance();
  BeginPatch_Position::default_instance_->InitAsDefaultInstance();
  BeginPatch_Color::default_instance_->InitAsDefaultInstance();
  EndPatch::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_patchgl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_patchgl_2eproto {
  StaticDescriptorInitializer_patchgl_2eproto() {
    protobuf_AddDesc_patchgl_2eproto();
  }
} static_descriptor_initializer_patchgl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Close::Close()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.Close)
}

void Close::InitAsDefaultInstance() {
}

Close::Close(const Close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.Close)
}

void Close::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Close::~Close() {
  // @@protoc_insertion_point(destructor:patchgl.Close)
  SharedDtor();
}

void Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Close_descriptor_;
}

const Close& Close::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

Close* Close::default_instance_ = NULL;

Close* Close::New() const {
  return new Close;
}

void Close::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.Close)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.Close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.Close)
  return false;
#undef DO_
}

void Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.Close)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.Close)
}

::google::protobuf::uint8* Close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.Close)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.Close)
  return target;
}

int Close::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Close*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Close::MergeFrom(const Close& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Close::CopyFrom(const Close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Close::IsInitialized() const {

  return true;
}

void Close::Swap(Close* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Close_descriptor_;
  metadata.reflection = Close_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginPatch_Position::kLeftFieldNumber;
const int BeginPatch_Position::kRightFieldNumber;
const int BeginPatch_Position::kTopFieldNumber;
const int BeginPatch_Position::kBottomFieldNumber;
const int BeginPatch_Position::kNearFieldNumber;
const int BeginPatch_Position::kFarFieldNumber;
#endif  // !_MSC_VER

BeginPatch_Position::BeginPatch_Position()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.BeginPatch.Position)
}

void BeginPatch_Position::InitAsDefaultInstance() {
}

BeginPatch_Position::BeginPatch_Position(const BeginPatch_Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.BeginPatch.Position)
}

void BeginPatch_Position::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  near_ = 1;
  far_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginPatch_Position::~BeginPatch_Position() {
  // @@protoc_insertion_point(destructor:patchgl.BeginPatch.Position)
  SharedDtor();
}

void BeginPatch_Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginPatch_Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginPatch_Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginPatch_Position_descriptor_;
}

const BeginPatch_Position& BeginPatch_Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

BeginPatch_Position* BeginPatch_Position::default_instance_ = NULL;

BeginPatch_Position* BeginPatch_Position::New() const {
  return new BeginPatch_Position;
}

void BeginPatch_Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeginPatch_Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(left_, bottom_);
    near_ = 1;
    far_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginPatch_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.BeginPatch.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right;
        break;
      }

      // required float right = 2;
      case 2: {
        if (tag == 21) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_top;
        break;
      }

      // required float top = 3;
      case 3: {
        if (tag == 29) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bottom;
        break;
      }

      // required float bottom = 4;
      case 4: {
        if (tag == 37) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_near;
        break;
      }

      // optional float near = 5 [default = 1];
      case 5: {
        if (tag == 45) {
         parse_near:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &near_)));
          set_has_near();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_far;
        break;
      }

      // optional float far = 6 [default = 1];
      case 6: {
        if (tag == 53) {
         parse_far:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &far_)));
          set_has_far();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.BeginPatch.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.BeginPatch.Position)
  return false;
#undef DO_
}

void BeginPatch_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.BeginPatch.Position)
  // required float left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // required float right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right(), output);
  }

  // required float top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->top(), output);
  }

  // required float bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  // optional float near = 5 [default = 1];
  if (has_near()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->near(), output);
  }

  // optional float far = 6 [default = 1];
  if (has_far()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->far(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.BeginPatch.Position)
}

::google::protobuf::uint8* BeginPatch_Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.BeginPatch.Position)
  // required float left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // required float right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right(), target);
  }

  // required float top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->top(), target);
  }

  // required float bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bottom(), target);
  }

  // optional float near = 5 [default = 1];
  if (has_near()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->near(), target);
  }

  // optional float far = 6 [default = 1];
  if (has_far()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->far(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.BeginPatch.Position)
  return target;
}

int BeginPatch_Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float left = 1;
    if (has_left()) {
      total_size += 1 + 4;
    }

    // required float right = 2;
    if (has_right()) {
      total_size += 1 + 4;
    }

    // required float top = 3;
    if (has_top()) {
      total_size += 1 + 4;
    }

    // required float bottom = 4;
    if (has_bottom()) {
      total_size += 1 + 4;
    }

    // optional float near = 5 [default = 1];
    if (has_near()) {
      total_size += 1 + 4;
    }

    // optional float far = 6 [default = 1];
    if (has_far()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginPatch_Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginPatch_Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginPatch_Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginPatch_Position::MergeFrom(const BeginPatch_Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_near()) {
      set_near(from.near());
    }
    if (from.has_far()) {
      set_far(from.far());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginPatch_Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginPatch_Position::CopyFrom(const BeginPatch_Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginPatch_Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BeginPatch_Position::Swap(BeginPatch_Position* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(near_, other->near_);
    std::swap(far_, other->far_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginPatch_Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginPatch_Position_descriptor_;
  metadata.reflection = BeginPatch_Position_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BeginPatch_Color::kRedFieldNumber;
const int BeginPatch_Color::kGreenFieldNumber;
const int BeginPatch_Color::kBlueFieldNumber;
const int BeginPatch_Color::kAlphaFieldNumber;
#endif  // !_MSC_VER

BeginPatch_Color::BeginPatch_Color()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.BeginPatch.Color)
}

void BeginPatch_Color::InitAsDefaultInstance() {
}

BeginPatch_Color::BeginPatch_Color(const BeginPatch_Color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.BeginPatch.Color)
}

void BeginPatch_Color::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  alpha_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginPatch_Color::~BeginPatch_Color() {
  // @@protoc_insertion_point(destructor:patchgl.BeginPatch.Color)
  SharedDtor();
}

void BeginPatch_Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginPatch_Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginPatch_Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginPatch_Color_descriptor_;
}

const BeginPatch_Color& BeginPatch_Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

BeginPatch_Color* BeginPatch_Color::default_instance_ = NULL;

BeginPatch_Color* BeginPatch_Color::New() const {
  return new BeginPatch_Color;
}

void BeginPatch_Color::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeginPatch_Color*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(red_, blue_);
    alpha_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginPatch_Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.BeginPatch.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float red = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_green;
        break;
      }

      // required float green = 2;
      case 2: {
        if (tag == 21) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_blue;
        break;
      }

      // required float blue = 3;
      case 3: {
        if (tag == 29) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_alpha;
        break;
      }

      // optional float alpha = 4 [default = 1];
      case 4: {
        if (tag == 37) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.BeginPatch.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.BeginPatch.Color)
  return false;
#undef DO_
}

void BeginPatch_Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.BeginPatch.Color)
  // required float red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->red(), output);
  }

  // required float green = 2;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->green(), output);
  }

  // required float blue = 3;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue(), output);
  }

  // optional float alpha = 4 [default = 1];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alpha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.BeginPatch.Color)
}

::google::protobuf::uint8* BeginPatch_Color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.BeginPatch.Color)
  // required float red = 1;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->red(), target);
  }

  // required float green = 2;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->green(), target);
  }

  // required float blue = 3;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue(), target);
  }

  // optional float alpha = 4 [default = 1];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alpha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.BeginPatch.Color)
  return target;
}

int BeginPatch_Color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float red = 1;
    if (has_red()) {
      total_size += 1 + 4;
    }

    // required float green = 2;
    if (has_green()) {
      total_size += 1 + 4;
    }

    // required float blue = 3;
    if (has_blue()) {
      total_size += 1 + 4;
    }

    // optional float alpha = 4 [default = 1];
    if (has_alpha()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginPatch_Color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginPatch_Color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginPatch_Color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginPatch_Color::MergeFrom(const BeginPatch_Color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginPatch_Color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginPatch_Color::CopyFrom(const BeginPatch_Color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginPatch_Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BeginPatch_Color::Swap(BeginPatch_Color* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginPatch_Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginPatch_Color_descriptor_;
  metadata.reflection = BeginPatch_Color_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BeginPatch::kPositionFieldNumber;
const int BeginPatch::kColorFieldNumber;
const int BeginPatch::kParentFieldNumber;
const int BeginPatch::kPatchIdFieldNumber;
#endif  // !_MSC_VER

BeginPatch::BeginPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.BeginPatch)
}

void BeginPatch::InitAsDefaultInstance() {
  position_ = const_cast< ::patchgl::BeginPatch_Position*>(&::patchgl::BeginPatch_Position::default_instance());
  color_ = const_cast< ::patchgl::BeginPatch_Color*>(&::patchgl::BeginPatch_Color::default_instance());
}

BeginPatch::BeginPatch(const BeginPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.BeginPatch)
}

void BeginPatch::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  color_ = NULL;
  parent_ = 0u;
  patch_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginPatch::~BeginPatch() {
  // @@protoc_insertion_point(destructor:patchgl.BeginPatch)
  SharedDtor();
}

void BeginPatch::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete color_;
  }
}

void BeginPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginPatch_descriptor_;
}

const BeginPatch& BeginPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

BeginPatch* BeginPatch::default_instance_ = NULL;

BeginPatch* BeginPatch::New() const {
  return new BeginPatch;
}

void BeginPatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeginPatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(parent_, patch_id_);
    if (has_position()) {
      if (position_ != NULL) position_->::patchgl::BeginPatch_Position::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::patchgl::BeginPatch_Color::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.BeginPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .patchgl.BeginPatch.Position position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // required .patchgl.BeginPatch.Color color = 2;
      case 2: {
        if (tag == 18) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_parent;
        break;
      }

      // optional fixed32 parent = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_patch_id;
        break;
      }

      // required fixed32 patch_id = 4;
      case 4: {
        if (tag == 37) {
         parse_patch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &patch_id_)));
          set_has_patch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.BeginPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.BeginPatch)
  return false;
#undef DO_
}

void BeginPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.BeginPatch)
  // required .patchgl.BeginPatch.Position position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // required .patchgl.BeginPatch.Color color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->color(), output);
  }

  // optional fixed32 parent = 3 [default = 0];
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->parent(), output);
  }

  // required fixed32 patch_id = 4;
  if (has_patch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->patch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.BeginPatch)
}

::google::protobuf::uint8* BeginPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.BeginPatch)
  // required .patchgl.BeginPatch.Position position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // required .patchgl.BeginPatch.Color color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->color(), target);
  }

  // optional fixed32 parent = 3 [default = 0];
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->parent(), target);
  }

  // required fixed32 patch_id = 4;
  if (has_patch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->patch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.BeginPatch)
  return target;
}

int BeginPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .patchgl.BeginPatch.Position position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .patchgl.BeginPatch.Color color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // optional fixed32 parent = 3 [default = 0];
    if (has_parent()) {
      total_size += 1 + 4;
    }

    // required fixed32 patch_id = 4;
    if (has_patch_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginPatch::MergeFrom(const BeginPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::patchgl::BeginPatch_Position::MergeFrom(from.position());
    }
    if (from.has_color()) {
      mutable_color()->::patchgl::BeginPatch_Color::MergeFrom(from.color());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_patch_id()) {
      set_patch_id(from.patch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginPatch::CopyFrom(const BeginPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void BeginPatch::Swap(BeginPatch* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(color_, other->color_);
    std::swap(parent_, other->parent_);
    std::swap(patch_id_, other->patch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginPatch_descriptor_;
  metadata.reflection = BeginPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndPatch::kPatchIdFieldNumber;
#endif  // !_MSC_VER

EndPatch::EndPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.EndPatch)
}

void EndPatch::InitAsDefaultInstance() {
}

EndPatch::EndPatch(const EndPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.EndPatch)
}

void EndPatch::SharedCtor() {
  _cached_size_ = 0;
  patch_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndPatch::~EndPatch() {
  // @@protoc_insertion_point(destructor:patchgl.EndPatch)
  SharedDtor();
}

void EndPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndPatch_descriptor_;
}

const EndPatch& EndPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

EndPatch* EndPatch::default_instance_ = NULL;

EndPatch* EndPatch::New() const {
  return new EndPatch;
}

void EndPatch::Clear() {
  patch_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.EndPatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 patch_id = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &patch_id_)));
          set_has_patch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.EndPatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.EndPatch)
  return false;
#undef DO_
}

void EndPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.EndPatch)
  // required fixed32 patch_id = 1;
  if (has_patch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->patch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.EndPatch)
}

::google::protobuf::uint8* EndPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.EndPatch)
  // required fixed32 patch_id = 1;
  if (has_patch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->patch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.EndPatch)
  return target;
}

int EndPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 patch_id = 1;
    if (has_patch_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndPatch::MergeFrom(const EndPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patch_id()) {
      set_patch_id(from.patch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPatch::CopyFrom(const EndPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EndPatch::Swap(EndPatch* other) {
  if (other != this) {
    std::swap(patch_id_, other->patch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndPatch_descriptor_;
  metadata.reflection = EndPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kCloseFieldNumber;
const int Command::kBeginPatchFieldNumber;
const int Command::kEndPatchFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:patchgl.Command)
}

void Command::InitAsDefaultInstance() {
  Command_default_oneof_instance_->close_ = const_cast< ::patchgl::Close*>(&::patchgl::Close::default_instance());
  Command_default_oneof_instance_->begin_patch_ = const_cast< ::patchgl::BeginPatch*>(&::patchgl::BeginPatch::default_instance());
  Command_default_oneof_instance_->end_patch_ = const_cast< ::patchgl::EndPatch*>(&::patchgl::EndPatch::default_instance());
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:patchgl.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_requests();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:patchgl.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_requests()) {
    clear_requests();
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patchgl_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::clear_requests() {
  switch(requests_case()) {
    case kClose: {
      delete requests_.close_;
      break;
    }
    case kBeginPatch: {
      delete requests_.begin_patch_;
      break;
    }
    case kEndPatch: {
      delete requests_.end_patch_;
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUESTS_NOT_SET;
}


void Command::Clear() {
  clear_requests();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:patchgl.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .patchgl.Close close = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_begin_patch;
        break;
      }

      // optional .patchgl.BeginPatch begin_patch = 2;
      case 2: {
        if (tag == 18) {
         parse_begin_patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_begin_patch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_patch;
        break;
      }

      // optional .patchgl.EndPatch end_patch = 3;
      case 3: {
        if (tag == 26) {
         parse_end_patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_patch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:patchgl.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:patchgl.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:patchgl.Command)
  // optional .patchgl.Close close = 1;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->close(), output);
  }

  // optional .patchgl.BeginPatch begin_patch = 2;
  if (has_begin_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->begin_patch(), output);
  }

  // optional .patchgl.EndPatch end_patch = 3;
  if (has_end_patch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->end_patch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:patchgl.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:patchgl.Command)
  // optional .patchgl.Close close = 1;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->close(), target);
  }

  // optional .patchgl.BeginPatch begin_patch = 2;
  if (has_begin_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->begin_patch(), target);
  }

  // optional .patchgl.EndPatch end_patch = 3;
  if (has_end_patch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->end_patch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:patchgl.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  switch (requests_case()) {
    // optional .patchgl.Close close = 1;
    case kClose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close());
      break;
    }
    // optional .patchgl.BeginPatch begin_patch = 2;
    case kBeginPatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->begin_patch());
      break;
    }
    // optional .patchgl.EndPatch end_patch = 3;
    case kEndPatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_patch());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.requests_case()) {
    case kClose: {
      mutable_close()->::patchgl::Close::MergeFrom(from.close());
      break;
    }
    case kBeginPatch: {
      mutable_begin_patch()->::patchgl::BeginPatch::MergeFrom(from.begin_patch());
      break;
    }
    case kEndPatch: {
      mutable_end_patch()->::patchgl::EndPatch::MergeFrom(from.end_patch());
      break;
    }
    case REQUESTS_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  if (has_begin_patch()) {
    if (!this->begin_patch().IsInitialized()) return false;
  }
  if (has_end_patch()) {
    if (!this->end_patch().IsInitialized()) return false;
  }
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(requests_, other->requests_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace patchgl

// @@protoc_insertion_point(global_scope)
