// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patchgl.proto

#ifndef PROTOBUF_patchgl_2eproto__INCLUDED
#define PROTOBUF_patchgl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace patchgl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_patchgl_2eproto();
void protobuf_AssignDesc_patchgl_2eproto();
void protobuf_ShutdownFile_patchgl_2eproto();

class BeginPatch;
class BeginPatch_Position;
class BeginPatch_Color;
class BeginPatchResponse;

// ===================================================================

class BeginPatch_Position : public ::google::protobuf::Message {
 public:
  BeginPatch_Position();
  virtual ~BeginPatch_Position();

  BeginPatch_Position(const BeginPatch_Position& from);

  inline BeginPatch_Position& operator=(const BeginPatch_Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginPatch_Position& default_instance();

  void Swap(BeginPatch_Position* other);

  // implements Message ----------------------------------------------

  BeginPatch_Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginPatch_Position& from);
  void MergeFrom(const BeginPatch_Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline float left() const;
  inline void set_left(float value);

  // required float right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline float right() const;
  inline void set_right(float value);

  // required float top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline float top() const;
  inline void set_top(float value);

  // required float bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline float bottom() const;
  inline void set_bottom(float value);

  // optional float near = 5 [default = 1];
  inline bool has_near() const;
  inline void clear_near();
  static const int kNearFieldNumber = 5;
  inline float near() const;
  inline void set_near(float value);

  // optional float far = 6 [default = 1];
  inline bool has_far() const;
  inline void clear_far();
  static const int kFarFieldNumber = 6;
  inline float far() const;
  inline void set_far(float value);

  // @@protoc_insertion_point(class_scope:patchgl.BeginPatch.Position)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_near();
  inline void clear_has_near();
  inline void set_has_far();
  inline void clear_has_far();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float left_;
  float right_;
  float top_;
  float bottom_;
  float near_;
  float far_;
  friend void  protobuf_AddDesc_patchgl_2eproto();
  friend void protobuf_AssignDesc_patchgl_2eproto();
  friend void protobuf_ShutdownFile_patchgl_2eproto();

  void InitAsDefaultInstance();
  static BeginPatch_Position* default_instance_;
};
// -------------------------------------------------------------------

class BeginPatch_Color : public ::google::protobuf::Message {
 public:
  BeginPatch_Color();
  virtual ~BeginPatch_Color();

  BeginPatch_Color(const BeginPatch_Color& from);

  inline BeginPatch_Color& operator=(const BeginPatch_Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginPatch_Color& default_instance();

  void Swap(BeginPatch_Color* other);

  // implements Message ----------------------------------------------

  BeginPatch_Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginPatch_Color& from);
  void MergeFrom(const BeginPatch_Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float red = 1;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline float red() const;
  inline void set_red(float value);

  // required float green = 2;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 2;
  inline float green() const;
  inline void set_green(float value);

  // required float blue = 3;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 3;
  inline float blue() const;
  inline void set_blue(float value);

  // optional float alpha = 4 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 4;
  inline float alpha() const;
  inline void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:patchgl.BeginPatch.Color)
 private:
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float red_;
  float green_;
  float blue_;
  float alpha_;
  friend void  protobuf_AddDesc_patchgl_2eproto();
  friend void protobuf_AssignDesc_patchgl_2eproto();
  friend void protobuf_ShutdownFile_patchgl_2eproto();

  void InitAsDefaultInstance();
  static BeginPatch_Color* default_instance_;
};
// -------------------------------------------------------------------

class BeginPatch : public ::google::protobuf::Message {
 public:
  BeginPatch();
  virtual ~BeginPatch();

  BeginPatch(const BeginPatch& from);

  inline BeginPatch& operator=(const BeginPatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginPatch& default_instance();

  void Swap(BeginPatch* other);

  // implements Message ----------------------------------------------

  BeginPatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginPatch& from);
  void MergeFrom(const BeginPatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BeginPatch_Position Position;
  typedef BeginPatch_Color Color;

  // accessors -------------------------------------------------------

  // required .patchgl.BeginPatch.Position position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::patchgl::BeginPatch_Position& position() const;
  inline ::patchgl::BeginPatch_Position* mutable_position();
  inline ::patchgl::BeginPatch_Position* release_position();
  inline void set_allocated_position(::patchgl::BeginPatch_Position* position);

  // required .patchgl.BeginPatch.Color color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::patchgl::BeginPatch_Color& color() const;
  inline ::patchgl::BeginPatch_Color* mutable_color();
  inline ::patchgl::BeginPatch_Color* release_color();
  inline void set_allocated_color(::patchgl::BeginPatch_Color* color);

  // optional fixed32 parent = 3 [default = 0];
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline ::google::protobuf::uint32 parent() const;
  inline void set_parent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:patchgl.BeginPatch)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_parent();
  inline void clear_has_parent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::patchgl::BeginPatch_Position* position_;
  ::patchgl::BeginPatch_Color* color_;
  ::google::protobuf::uint32 parent_;
  friend void  protobuf_AddDesc_patchgl_2eproto();
  friend void protobuf_AssignDesc_patchgl_2eproto();
  friend void protobuf_ShutdownFile_patchgl_2eproto();

  void InitAsDefaultInstance();
  static BeginPatch* default_instance_;
};
// -------------------------------------------------------------------

class BeginPatchResponse : public ::google::protobuf::Message {
 public:
  BeginPatchResponse();
  virtual ~BeginPatchResponse();

  BeginPatchResponse(const BeginPatchResponse& from);

  inline BeginPatchResponse& operator=(const BeginPatchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginPatchResponse& default_instance();

  void Swap(BeginPatchResponse* other);

  // implements Message ----------------------------------------------

  BeginPatchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginPatchResponse& from);
  void MergeFrom(const BeginPatchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 patch = 1;
  inline bool has_patch() const;
  inline void clear_patch();
  static const int kPatchFieldNumber = 1;
  inline ::google::protobuf::uint32 patch() const;
  inline void set_patch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:patchgl.BeginPatchResponse)
 private:
  inline void set_has_patch();
  inline void clear_has_patch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 patch_;
  friend void  protobuf_AddDesc_patchgl_2eproto();
  friend void protobuf_AssignDesc_patchgl_2eproto();
  friend void protobuf_ShutdownFile_patchgl_2eproto();

  void InitAsDefaultInstance();
  static BeginPatchResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BeginPatch_Position

// required float left = 1;
inline bool BeginPatch_Position::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginPatch_Position::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginPatch_Position::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginPatch_Position::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline float BeginPatch_Position::left() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.left)
  return left_;
}
inline void BeginPatch_Position::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.left)
}

// required float right = 2;
inline bool BeginPatch_Position::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginPatch_Position::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginPatch_Position::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginPatch_Position::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline float BeginPatch_Position::right() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.right)
  return right_;
}
inline void BeginPatch_Position::set_right(float value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.right)
}

// required float top = 3;
inline bool BeginPatch_Position::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginPatch_Position::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginPatch_Position::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginPatch_Position::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline float BeginPatch_Position::top() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.top)
  return top_;
}
inline void BeginPatch_Position::set_top(float value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.top)
}

// required float bottom = 4;
inline bool BeginPatch_Position::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeginPatch_Position::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeginPatch_Position::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeginPatch_Position::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline float BeginPatch_Position::bottom() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.bottom)
  return bottom_;
}
inline void BeginPatch_Position::set_bottom(float value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.bottom)
}

// optional float near = 5 [default = 1];
inline bool BeginPatch_Position::has_near() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeginPatch_Position::set_has_near() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BeginPatch_Position::clear_has_near() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BeginPatch_Position::clear_near() {
  near_ = 1;
  clear_has_near();
}
inline float BeginPatch_Position::near() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.near)
  return near_;
}
inline void BeginPatch_Position::set_near(float value) {
  set_has_near();
  near_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.near)
}

// optional float far = 6 [default = 1];
inline bool BeginPatch_Position::has_far() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BeginPatch_Position::set_has_far() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BeginPatch_Position::clear_has_far() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BeginPatch_Position::clear_far() {
  far_ = 1;
  clear_has_far();
}
inline float BeginPatch_Position::far() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Position.far)
  return far_;
}
inline void BeginPatch_Position::set_far(float value) {
  set_has_far();
  far_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Position.far)
}

// -------------------------------------------------------------------

// BeginPatch_Color

// required float red = 1;
inline bool BeginPatch_Color::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginPatch_Color::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginPatch_Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginPatch_Color::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline float BeginPatch_Color::red() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Color.red)
  return red_;
}
inline void BeginPatch_Color::set_red(float value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Color.red)
}

// required float green = 2;
inline bool BeginPatch_Color::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginPatch_Color::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginPatch_Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginPatch_Color::clear_green() {
  green_ = 0;
  clear_has_green();
}
inline float BeginPatch_Color::green() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Color.green)
  return green_;
}
inline void BeginPatch_Color::set_green(float value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Color.green)
}

// required float blue = 3;
inline bool BeginPatch_Color::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginPatch_Color::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginPatch_Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginPatch_Color::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
inline float BeginPatch_Color::blue() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Color.blue)
  return blue_;
}
inline void BeginPatch_Color::set_blue(float value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Color.blue)
}

// optional float alpha = 4 [default = 1];
inline bool BeginPatch_Color::has_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeginPatch_Color::set_has_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeginPatch_Color::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeginPatch_Color::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float BeginPatch_Color::alpha() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.Color.alpha)
  return alpha_;
}
inline void BeginPatch_Color::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.Color.alpha)
}

// -------------------------------------------------------------------

// BeginPatch

// required .patchgl.BeginPatch.Position position = 1;
inline bool BeginPatch::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginPatch::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginPatch::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginPatch::clear_position() {
  if (position_ != NULL) position_->::patchgl::BeginPatch_Position::Clear();
  clear_has_position();
}
inline const ::patchgl::BeginPatch_Position& BeginPatch::position() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::patchgl::BeginPatch_Position* BeginPatch::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::patchgl::BeginPatch_Position;
  // @@protoc_insertion_point(field_mutable:patchgl.BeginPatch.position)
  return position_;
}
inline ::patchgl::BeginPatch_Position* BeginPatch::release_position() {
  clear_has_position();
  ::patchgl::BeginPatch_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline void BeginPatch::set_allocated_position(::patchgl::BeginPatch_Position* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:patchgl.BeginPatch.position)
}

// required .patchgl.BeginPatch.Color color = 2;
inline bool BeginPatch::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginPatch::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginPatch::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginPatch::clear_color() {
  if (color_ != NULL) color_->::patchgl::BeginPatch_Color::Clear();
  clear_has_color();
}
inline const ::patchgl::BeginPatch_Color& BeginPatch::color() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::patchgl::BeginPatch_Color* BeginPatch::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::patchgl::BeginPatch_Color;
  // @@protoc_insertion_point(field_mutable:patchgl.BeginPatch.color)
  return color_;
}
inline ::patchgl::BeginPatch_Color* BeginPatch::release_color() {
  clear_has_color();
  ::patchgl::BeginPatch_Color* temp = color_;
  color_ = NULL;
  return temp;
}
inline void BeginPatch::set_allocated_color(::patchgl::BeginPatch_Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:patchgl.BeginPatch.color)
}

// optional fixed32 parent = 3 [default = 0];
inline bool BeginPatch::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginPatch::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginPatch::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginPatch::clear_parent() {
  parent_ = 0u;
  clear_has_parent();
}
inline ::google::protobuf::uint32 BeginPatch::parent() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatch.parent)
  return parent_;
}
inline void BeginPatch::set_parent(::google::protobuf::uint32 value) {
  set_has_parent();
  parent_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatch.parent)
}

// -------------------------------------------------------------------

// BeginPatchResponse

// required fixed32 patch = 1;
inline bool BeginPatchResponse::has_patch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginPatchResponse::set_has_patch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginPatchResponse::clear_has_patch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginPatchResponse::clear_patch() {
  patch_ = 0u;
  clear_has_patch();
}
inline ::google::protobuf::uint32 BeginPatchResponse::patch() const {
  // @@protoc_insertion_point(field_get:patchgl.BeginPatchResponse.patch)
  return patch_;
}
inline void BeginPatchResponse::set_patch(::google::protobuf::uint32 value) {
  set_has_patch();
  patch_ = value;
  // @@protoc_insertion_point(field_set:patchgl.BeginPatchResponse.patch)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace patchgl

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_patchgl_2eproto__INCLUDED
